// Generated by gencpp from file my_first_package/position.msg
// DO NOT EDIT!


#ifndef MY_FIRST_PACKAGE_MESSAGE_POSITION_H
#define MY_FIRST_PACKAGE_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_first_package
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : message()
    , x(0.0)
    , y(0.0)
    , even(false)
    , array()  {
    }
  position_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , x(0.0)
    , y(0.0)
    , even(false)
    , array(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _even_type;
  _even_type even;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _array_type;
  _array_type array;





  typedef boost::shared_ptr< ::my_first_package::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_first_package::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::my_first_package::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::my_first_package::position > positionPtr;
typedef boost::shared_ptr< ::my_first_package::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_first_package::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_first_package::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_first_package::position_<ContainerAllocator1> & lhs, const ::my_first_package::position_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.even == rhs.even &&
    lhs.array == rhs.array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_first_package::position_<ContainerAllocator1> & lhs, const ::my_first_package::position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_first_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_first_package::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_first_package::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_first_package::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_first_package::position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_first_package::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_first_package::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_first_package::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a284313f2e54143038565ca094ceb0f";
  }

  static const char* value(const ::my_first_package::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a284313f2e54143ULL;
  static const uint64_t static_value2 = 0x038565ca094ceb0fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_first_package::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_first_package/position";
  }

  static const char* value(const ::my_first_package::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_first_package::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n"
"float32 x\n"
"float32 y\n"
"bool even\n"
"string[] array\n"
;
  }

  static const char* value(const ::my_first_package::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_first_package::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.even);
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_first_package::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_first_package::position_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "even: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.even);
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_FIRST_PACKAGE_MESSAGE_POSITION_H
